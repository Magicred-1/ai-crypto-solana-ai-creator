// api/textToSpeech/route.ts
import { NextResponse, NextRequest } from "next/server";

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const base64Audio = body.audio;

    const ELIZA_URL = process.env.ELIZA_URL;

    if (!base64Audio) {
      return NextResponse.json({ error: "Audio file is required" }, { status: 400 });
    }

    // Convert base64 to buffer
    const audioBuffer = Buffer.from(base64Audio, "base64");

    // OpenAI expects a file-like object, including a name
    const audioFile = new File([audioBuffer], "audio.wav", { type: "audio/wav" });

    // Call OpenAI Whisper API to transcribe the audio
    const transcription = await openai.audio.transcriptions.create({
      file: audioFile,
      model: "whisper-1",
    });

    if (!transcription || !transcription.text) {
      return NextResponse.json({ error: "Failed to transcribe audio" }, { status: 500 });
    }

    // Send the transcription text to the external /api/textToSpeech endpoint for TTS conversion
    const textToSpeechApiUrl = `${ELIZA_URL}/api/speak`;

    const speechResponse = await fetch(textToSpeechApiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        text: transcription.text,
      }),
    });

    if (!speechResponse.ok) {
      throw new Error(`External TTS API error: ${speechResponse.statusText}`);
    }

    const audioBufferResponse = await speechResponse.arrayBuffer();

    // Return the audio file generated by ElevenLabs as a response
    return new NextResponse(Buffer.from(audioBufferResponse), {
      headers: {
        "Content-Type": "audio/mpeg",
        "Transfer-Encoding": "chunked",
      },
    });
  } catch (error: any) {
    console.error("Error processing audio or text-to-speech:", error);
    const errorMessage =
      error.response?.data?.error?.message || error.message || "Failed to process audio.";
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}
